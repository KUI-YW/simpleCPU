// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "05/17/2021 17:27:47"
                                                                                
// Verilog Test Bench template for design : top
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ns/ 1 ps
module top_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clock;
reg exec;
reg [15:0] in;
reg reset;
// wires                                               
wire [11:0]  cmpb_address;
wire [15:0]  cmpb_instr;
wire [1:0]  debugstatus;
wire [15:0]  EX_ALUres;
wire [15:0]  EX_instr;
wire [1:0]  flash;
wire [15:0]  ID_instr;
wire [11:0]  ID_pcpin;
wire [15:0]  ID_ra;
wire [15:0]  ID_rb;
wire [15:0]  IF_instr;
wire [15:0]  IF_instr_add;
wire is_branch_hazard;
wire is_cmpb_satisfied;
wire is_data_stall_hazard;
wire is_jump;
wire [15:0]  MEM_instr;
wire MEM_isload;
wire MEM_isstore;
wire [15:0]  MEM_memoryd;
wire [15:0]  out;
wire phase1;
wire phase2;
wire [15:0]  rad0;
wire [15:0]  rad1;
wire [15:0]  rbd0;
wire [11:0]  resultpc;
wire [15:0]  WB_instr;
wire [15:0]  WB_writedata;

// assign statements (if any)                          
top i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.cmpb_address(cmpb_address),
	.cmpb_instr(cmpb_instr),
	.debugstatus(debugstatus),
	.EX_ALUres(EX_ALUres),
	.EX_instr(EX_instr),
	.exec(exec),
	.flash(flash),
	.ID_instr(ID_instr),
	.ID_pcpin(ID_pcpin),
	.ID_ra(ID_ra),
	.ID_rb(ID_rb),
	.IF_instr(IF_instr),
	.IF_instr_add(IF_instr_add),
	.in(in),
	.is_branch_hazard(is_branch_hazard),
	.is_cmpb_satisfied(is_cmpb_satisfied),
	.is_data_stall_hazard(is_data_stall_hazard),
	.is_jump(is_jump),
	.MEM_instr(MEM_instr),
	.MEM_isload(MEM_isload),
	.MEM_isstore(MEM_isstore),
	.MEM_memoryd(MEM_memoryd),
	.out(out),
	.phase1(phase1),
	.phase2(phase2),
	.rad0(rad0),
	.rad1(rad1),
	.rbd0(rbd0),
	.reset(reset),
	.resultpc(resultpc),
	.WB_instr(WB_instr),
	.WB_writedata(WB_writedata)
);
initial                               
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
clock <= 0;
reset <= 1;
exec <= 0;
in <= 16'b0000_0000_0000_0000;                                                       
// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
#100
clock <= ~clock;                                                       
//@eachvec;                                              
// --> end                                             
end                    

always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
#100
reset <= 0;                                                       
//@eachvec;                                              
// --> end                                             
end                                                    
endmodule