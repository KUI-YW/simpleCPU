module ALU_LI(
	input [15:0] instr,
	input signed [15:0] rs,
	input signed [15:0] rd,
	output reg [15:0] result, 
	output reg signflag,
	output reg zeroflag,
	output reg carryflag,
	output reg overflow
);

	always @(*) begin
	
		reg [2:0] op1 = instr[15:14];
		reg [2:0] op2 = instr[13:11];
		reg [3:0] op3 = instr[7:4];
		reg signed [7:0] d = instr[7:0];
		reg signed [15:0] exd;
		reg signed [16:0] exresult;
		
		//signed extention
		exd = (d[7] ? {8'b11111111,d} : {8'b00000000,d});
		
		//calculation
		if(op1 == 2'b00) begin 
			exresult <= (rd + exd); 
		end 
		else if(op1 == 2'b01) begin
			exresult <= (rd + exd); 
		end
		else if(op1 == 2'b10) begin
			
		end
		else begin 
			case (op3) begin 
				4'b0000 : result <= (rs + rd);
				4'b0000 : result <= (rs + rd);
				4'b0000 : result <= (rs + rd);
				4'b0000 : result <= (rs + rd);
				4'b0000 : result <= (rs + rd);
				default : result <= 16'b0000_0000_0000_0000;
			end
		end
	end
	
endmodule
