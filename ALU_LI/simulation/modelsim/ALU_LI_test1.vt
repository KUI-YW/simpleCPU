// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "05/12/2021 16:52:41"
                                                                                
// Verilog Test Bench template for design : ALU_LI
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ns/ 1 ps
module ALU_LI_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg [15:0] iData;
reg [15:0] instr;
reg [15:0] rd;
reg [15:0] rs;
// wires                                               
wire carryFlag;
wire overflowFlag;
wire [15:0]  result;
wire signFlag;
wire zeroFlag;

// assign statements (if any)                          
ALU_LI i1 (
// port map - connection between master ports and signals/registers   
	.carryFlag(carryFlag),
	.iData(iData),
	.instr(instr),
	.overflowFlag(overflowFlag),
	.rd(rd),
	.result(result),
	.rs(rs),
	.signFlag(signFlag),
	.zeroFlag(zeroFlag)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
iData <= 16'b0000_1111_1111_1111;                                                  
// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin
// code executes for every event on sensitivity list   
// insert code here --> begin              
#100

//load
#100
instr <= 16'b0000_1010_0101_0101; 
rs <= 16'b0000_1111_0000_0000;
rd <= 16'b0000_0000_0000_1111;

//store
#100
instr <= 16'b0100_1010_0101_0101; 
rs <= 16'b0000_1111_0000_0000;
rd <= 16'b0000_0000_0000_1111;    

//LoadImm
#100
instr <= 16'b1000_1010_0101_0101; 
rs <= 16'b0000_1111_0000_0000;
rd <= 16'b0000_1111_0000_1111;

#100
instr <= 16'b1000_0010_0101_0101; 
rs <= 16'b0000_1111_0000_0000;
rd <= 16'b0000_1111_0000_1111;

#100
instr <= 16'b1000_1010_0101_0101; 
rs <= 16'b0000_1111_0000_0000;
rd <= 16'b0000_1111_0000_1111;

#100
instr <= 16'b1001_0010_0101_0101; 
rs <= 16'b0000_1111_0000_0000;
rd <= 16'b0000_1111_0000_1111;

//ALU
//add
//normal
#200
#100
instr <= 16'b1100_1010_0000_0111; 
rs <= 16'b1111_0000_1111_0000;
rd <= 16'b0000_1111_0000_1111;

//zero(yes) sign(not)
#100
instr <= 16'b1100_1010_0000_0111; 
rs <= 16'b0111_0000_1111_0001;
rd <= 16'b1000_1111_0000_1111;

//zero(no) sign(yes)
#100
instr <= 16'b1100_1010_0000_0111; 
rs <= 16'b0111_0000_1111_0000;
rd <= 16'b1000_1111_0000_1111;

//positive overflow
#100
instr <= 16'b1100_1010_0000_0111; 
rs <= 16'b0111_1111_1111_1111;
rd <= 16'b0000_0000_0000_1111;

//negative overflow
#100
instr <= 16'b1100_1010_0000_0111; 
rs <= 16'b1000_1111_1111_1111;
rd <= 16'b1000_0000_0000_1111;

#100
instr <= 16'b1100_1010_0000_0111; 
rs <= 16'b0000_0000_0000_0000;
rd <= 16'b0000_0000_0000_0000;


//sub
#200
#100
instr <= 16'b1100_1010_0001_0111; 
rs <= 16'b1111_0000_1111_0000;
rd <= 16'b0000_1111_0000_1111;

//zero(yes) sign(not)
#100
instr <= 16'b1100_1010_0001_0111; 
rs <= 16'b0111_0000_1111_0001;
rd <= 16'b1000_1111_0000_1111;

//zero(no) sign(yes)
#100
instr <= 16'b1100_1010_0001_0111; 
rs <= 16'b0111_0000_1111_0000;
rd <= 16'b1000_1111_0000_1111;

//positive overflow
#100
instr <= 16'b1100_1010_0001_0111; 
rs <= 16'b0111_1111_1111_1111;
rd <= 16'b0000_0000_0000_1111;

//negative overflow
#100
instr <= 16'b1100_1010_0001_0111; 
rs <= 16'b1000_1111_1111_1111;
rd <= 16'b1000_0000_0000_1111;

#100
instr <= 16'b1100_1010_0001_0111; 
rs <= 16'b0000_0000_0000_0000;
rd <= 16'b0000_0000_0000_0000;
                                           
//and
#200
#100
instr <= 16'b1100_1010_0010_0111; 
rs <= 16'b0011_0000_1111_0000;
rd <= 16'b0101_1111_0000_1111;

//or 
#100
instr <= 16'b1100_1010_0011_0111; 
rs <= 16'b0011_0000_1111_0000;
rd <= 16'b0101_1111_0000_1111;

//xor
#100
instr <= 16'b1100_1010_0100_0111; 
rs <= 16'b0011_0000_1111_0000;
rd <= 16'b0101_1111_0000_1111;

//move
#200
#100
instr <= 16'b1100_1010_0110_0111; 
rs <= 16'b0011_0000_1111_0000;
rd <= 16'b0101_1111_0000_1111;

//shift
#200
#100
instr <= 16'b1100_1010_1000_0111; 
rs <= 16'b0000_0000_0000_0000;
rd <= 16'b1010_1111_0011_0101;

#100
instr <= 16'b1100_1010_1001_0111; 
rs <= 16'b0000_0000_0000_0000;
rd <= 16'b1010_1111_0011_0101;

#100
instr <= 16'b1100_1010_1010_0111; 
rs <= 16'b0000_0000_0000_0000;
rd <= 16'b1010_1111_0011_0101;

#100
instr <= 16'b1100_1010_1011_0111; 
rs <= 16'b0000_0000_0000_0000;
rd <= 16'b1010_1111_0011_0101;

//input
#100
#100
instr <= 16'b1100_1010_1100_0111; 
rs <= 16'b0000_0000_0000_0000;
rd <= 16'b1010_1111_0011_0101;
                                                       
//@eachvec;                                              
// --> end                                             
end                                                    
endmodule

