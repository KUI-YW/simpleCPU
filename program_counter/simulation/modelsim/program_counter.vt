// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "05/20/2021 02:21:09"
                                                                                
// Verilog Test Bench template for design : program_counter
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module program_counter_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg [11:0] branch_hazard_instr_add;
reg clock;
reg [11:0] cmpb_instr_add;
reg enable;
reg exec;
reg is_branch_hazard_stall;
reg is_cmpb_satisfied;
reg is_data_hazard_stall;
reg is_halt_commanded;
reg is_jump;
reg [11:0] jump_instr_add;
reg reset;
// wires                                               
wire [11:0]  instr_add;
wire instr_add_is_overflow;

// assign statements (if any)                          
program_counter i1 (
// port map - connection between master ports and signals/registers   
	.branch_hazard_instr_add(branch_hazard_instr_add),
	.clock(clock),
	.cmpb_instr_add(cmpb_instr_add),
	.enable(enable),
	.exec(exec),
	.instr_add(instr_add),
	.instr_add_is_overflow(instr_add_is_overflow),
	.is_branch_hazard_stall(is_branch_hazard_stall),
	.is_cmpb_satisfied(is_cmpb_satisfied),
	.is_data_hazard_stall(is_data_hazard_stall),
	.is_halt_commanded(is_halt_commanded),
	.is_jump(is_jump),
	.jump_instr_add(jump_instr_add),
	.reset(reset)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
                                                       
// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
                                                       
@eachvec;                                              
// --> end                                             
end                                                    
endmodule

