module segleddecoder
(
  input count_clock,
  input selector_clock, 
  input reset,
  input [15:0] num,
  //output [15:0] cnt,    //カウントを出力する
  output [7:0] LED,
  output [3:0] selector
);
  
  
  function [7:0] dec_to_LED;
	 input [15:0] dec_num;
	 begin 
		case (dec_num)
		  16'd0 : dec_to_LED = 8'b1111_1100;
		  16'd1 : dec_to_LED = 8'b0110_0000;
		  16'd2 : dec_to_LED = 8'b1101_1010;
		  16'd3 : dec_to_LED = 8'b1111_0010;
		  16'd4 : dec_to_LED = 8'b0110_0110;
		  16'd5 : dec_to_LED = 8'b1011_0110;
		  16'd6 : dec_to_LED = 8'b1011_1110;
		  16'd7 : dec_to_LED = 8'b1110_0000;
		  16'd8 : dec_to_LED = 8'b1111_1110;
		  16'd9 : dec_to_LED = 8'b1111_0110;
		  default : dec_to_LED = 8'b0000_0000;
		endcase
	 end
  endfunction

  reg [15:0] count_data;
  reg [15:0] selector_count = 16'd0;
  reg [7:0] LED_data;
  reg [3:0] selector_data;
  
  always@(posedge count_clock or negedge reset) begin
	 if(! reset) begin
		count_data <= 16'd0000;
	 end else if (num > 16'd9999) begin
		count_data <= 16'd0000;
	 end else begin
		count_data <= num; 
	 end
  end
  
  always@(posedge selector_clock) begin	 
	 if (selector_count % 16'd400 == 16'd0) begin 
	   LED_data <= dec_to_LED((count_data / 16'd1000) % 16'd10);
	   selector_data <= 4'b0111;
	 end 
	 else if (selector_count % 16'd400 == 16'd100) begin 
	   LED_data <= dec_to_LED((count_data / 16'd100) % 16'd10);
	   selector_data <= 4'b1011;
	 end 
    else if (selector_count % 16'd400 == 16'd200) begin 
	   LED_data <= dec_to_LED((count_data / 16'd10) % 16'd10);
	   selector_data <= 4'b1101;
    end 
	 else if (selector_count % 16'd400 == 16'd300) begin 
	   LED_data <= dec_to_LED(count_data % 16'd10);
	   selector_data <= 4'b1110;
    end 
    
	 if (selector_count == 9999) begin 
	   selector_count <= 16'd0000;
    end 
	 else begin
      selector_count <= selector_count + 16'd1;
	 end		 
  end

  assign LED = LED_data;
  assign selector = selector_data;
  //assign cnt  = count_data;

endmodule