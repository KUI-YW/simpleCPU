module bunki_v2(inst,pc,hzpc,contradict,clock,resultpc,status,conseq,immd,oneortwo,consresult,hzimmd,pcmulti,reset);
input [15:0] inst;

input reset;
wire [4:0] opfive;
assign opfive = inst [15:11];
input [11:0] pc;
input [11:0] hzpc;
input [11:0] immd;
input [11:0] hzimmd;
input contradict;//結果が予測失敗のとき１
input conseq;//結果がかえって来るとき１
input consresult;//結果が分岐しないとき０、するとき１
input clock;

output [11:0]resultpc;
output [1:0] status;//分岐命令じゃないとき00、分岐すると予測した時１０,分岐しないと予測した時０１
output oneortwo;//1命令分岐のとき０、２命令分岐の時１
output pcmulti;//pcに更新する値を決めるマルチプレクサの制御信号


reg [1:0] prefile [15:0];//00,01で分岐しない１０、１１で分岐する
wire istwobranch;//２命令分岐
wire isnocond;//無条件分岐
wire isonebranch;//１命令分岐

wire isbranch;
assign isbranch = istwobranch || isonebranch;

assign istwobranch = (opfive == 5'b10111 && compflag == 1'b1)?1'b1:1'b0;
assign isnocond = (opfive == 5'b10100)?1'b1:1'b0;
assign isonebranch = onebranch(opfive);

assign status = changestatus({isbranch,pc[3:0]});
assign oneortwo = (istwobranch ==1'b1 )?1'b1:1'b0;

wire [1:0] topred;
assign topred = (conseq==1'b1)? changeprefile({consresult,prefile[hzpc[3:0]]}):prefile[hzpc[3:0]];


wire [2:0] changepc;//下位2bitが00のときpcかつpc+1,10のときhzpcかつhzpc+1,１１のときhzかつhz+hzimmd+1、また最上位が１のとき無条件分岐
wire [1:0]wherebranch;//最高位が1のときにぶんき、０のときに分岐しない
assign wherebranch = prefile[pc];

assign changepc = tochangepc({isnocond,wherebranch[1],isbranch,contradict,conseq,consresult});

assign resultpc = ispc({changepc,pc,hzpc,immd,hzimmd});

assign pcmulti = topcmulti({contradict,conseq,isbranch,isnocond});

wire iscomp;
reg comp;

wire compflag;

assign iscomp = (inst[15:14] == 2'b00 && inst[7:4] == 4'b0101)?1'b1:1'b0;

assign compflag = comp;

integer i;
always @(posedge clock) begin
	if(reset == 1'b1) begin
	 for (i =0;i<16;i=i+1) begin
	 prefile[i] <= 2'b00;
	 end 
	 end else begin
	 prefile[hzpc[3:0]] <= topred;
	 comp <= iscomp;
	 end
	
	end




function onebranch;
	input [4:0] five;
	begin
	if(five == 5'b01010) onebranch= 1'b1;
	else if(five == 5'b01011) onebranch= 1'b1;
	else if(five == 5'b01101) onebranch= 1'b1;
	else if(five == 5'b01110) onebranch= 1'b1;
	else onebranch = 1'b0;
	end
endfunction


function [1:0]tochangestatus;//changestatusにつかう
	input [3:0] inst;
	begin
	if(prefile[inst] == 2'b00) tochangestatus = 2'b01;
	else if(prefile[inst] == 2'b01) tochangestatus = 2'b01;
	else if(prefile[inst] == 2'b10) tochangestatus = 2'b10;
	else if(prefile[inst] == 2'b11) tochangestatus = 2'b10;
	else tochangestatus = 2'b00;
	end
	endfunction
	

function [1:0]changestatus;
	input [4:0]isbra_inst;
	begin
	if(isbra_inst[4] == 1'b1) changestatus = tochangestatus(isbra_inst[3:0]);
	else changestatus = 2'b00;
	end
	endfunction
	
function [1:0]changeprefile;
	input [2:0]result_pred;
	begin 
	if(result_pred == 3'b111) changeprefile = 2'b11;
	else if(result_pred == 3'b110) changeprefile = 2'b11; 
	else if(result_pred == 3'b101) changeprefile = 2'b10; 
	else if(result_pred == 3'b100) changeprefile = 2'b01; 
	else if(result_pred == 3'b011) changeprefile = 2'b10; 
	else if(result_pred == 3'b010) changeprefile = 2'b01; 
	else if(result_pred == 3'b001) changeprefile = 2'b00; 
	else  changeprefile = 2'b00; 
	
	end
	endfunction
	
	function [2:0]tochangepc;
		input [4:0]nocon_wh_bra_tra_seq_resu;
		begin
		if(nocon_wh_bra_tra_seq_resu[2:1] == 2'b11) tochangepc = {1'b01,nocon_wh_bra_tra_seq_resu[0]};
		else if(nocon_wh_bra_tra_seq_resu[3] == 1'b1) tochangepc = {1'b00,nocon_wh_bra_tra_seq_resu[4]};
		else if(nocon_wh_bra_tra_seq_resu[4] == 1'b1) tochangepc = 3'b100;
		else tochangepc = 3'b000;
		end
		endfunction
		
		
	function [11:0]ispc;
		input [50:0]ch_pc_hzpc_immd_hzimmd;
		begin
		if(ch_pc_hzpc_immd_hzimmd[50:48] == 3'b000) ispc = ch_pc_hzpc_immd_hzimmd[47:36]+1'b1;
		else if(ch_pc_hzpc_immd_hzimmd[50:48] == 3'b001) ispc = ch_pc_hzpc_immd_hzimmd[47:36] +ch_pc_hzpc_immd_hzimmd[23:12]+1'b1;
		else if(ch_pc_hzpc_immd_hzimmd[50:48] == 3'b010) ispc = ch_pc_hzpc_immd_hzimmd[35:24] +1'b1;
		else if(ch_pc_hzpc_immd_hzimmd[50:48] == 3'b011) ispc = ch_pc_hzpc_immd_hzimmd[11:0] +ch_pc_hzpc_immd_hzimmd[47:36]+1'b1;
		else if(ch_pc_hzpc_immd_hzimmd[50:48] == 3'b100) ispc = ch_pc_hzpc_immd_hzimmd[47:36] +ch_pc_hzpc_immd_hzimmd[23:12]+1'b1;
		else ispc = ch_pc_hzpc_immd_hzimmd[47:36]+1'b1;
		end
		endfunction
function  topcmulti;
	input [3:0]contra_cons_bra_nocon;
	begin 
	if (contra_cons_bra_nocon[3:2] == 2'b11) topcmulti = 1'b1;
	else if(contra_cons_bra_nocon[1] == 1'b1) topcmulti = 1'b1;
	else if(contra_cons_bra_nocon[0] == 1'b1) topcmulti = 1'b1;
	else topcmulti = 1'b0;
	end
	endfunction
endmodule
