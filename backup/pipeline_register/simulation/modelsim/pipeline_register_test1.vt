// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "06/02/2021 16:51:18"
                                                                                
// Verilog Test Bench template for design : pipeline_register
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ns/ 1 ps
module pipeline_register_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clock;
reg enable;
reg exec;
reg flush;
reg [15:0] idata1;
reg [15:0] idata2;
reg [15:0] idata3;
reg [15:0] idata4;
reg [15:0] idata5;
reg iflag1;
reg iflag2;
reg iflag3;
reg iflag4;
reg iflag5;
reg iflag6;
reg iflag7;
reg iflag8;
reg iflag9;
reg iflag10;
reg iflag11;
reg iflag12;
reg iflag13;
reg iflag14;
reg iflag15;
reg iflag16;
reg is_halt_commanded;
reg reset;
reg stall;
// wires                                               
wire is_halt_now;
wire [15:0]  odata1;
wire [15:0]  odata2;
wire [15:0]  odata3;
wire [15:0]  odata4;
wire [15:0]  odata5;
wire oflag1;
wire oflag2;
wire oflag3;
wire oflag4;
wire oflag5;
wire oflag6;
wire oflag7;
wire oflag8;
wire oflag9;
wire oflag10;
wire oflag11;
wire oflag12;
wire oflag13;
wire oflag14;
wire oflag15;
wire oflag16;

// assign statements (if any)                          
pipeline_register i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.enable(enable),
	.exec(exec),
	.flush(flush),
	.idata1(idata1),
	.idata2(idata2),
	.idata3(idata3),
	.idata4(idata4),
	.idata5(idata5),
	.iflag1(iflag1),
	.iflag2(iflag2),
	.iflag3(iflag3),
	.iflag4(iflag4),
	.iflag5(iflag5),
	.iflag6(iflag6),
	.iflag7(iflag7),
	.iflag8(iflag8),
	.iflag9(iflag9),
	.iflag10(iflag10),
	.iflag11(iflag11),
	.iflag12(iflag12),
	.iflag13(iflag13),
	.iflag14(iflag14),
	.iflag15(iflag15),
	.iflag16(iflag16),
	.is_halt_commanded(is_halt_commanded),
	.is_halt_now(is_halt_now),
	.odata1(odata1),
	.odata2(odata2),
	.odata3(odata3),
	.odata4(odata4),
	.odata5(odata5),
	.oflag1(oflag1),
	.oflag2(oflag2),
	.oflag3(oflag3),
	.oflag4(oflag4),
	.oflag5(oflag5),
	.oflag6(oflag6),
	.oflag7(oflag7),
	.oflag8(oflag8),
	.oflag9(oflag9),
	.oflag10(oflag10),
	.oflag11(oflag11),
	.oflag12(oflag12),
	.oflag13(oflag13),
	.oflag14(oflag14),
	.oflag15(oflag15),
	.oflag16(oflag16),
	.reset(reset),
	.stall(stall)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
clock <=1'b0;
reset <=1'b0;
exec <= 1'b0;   
enable <= 1'b1;  
flush <= 1'b0;
stall <= 1'b0;
is_halt_commanded <= 1'b0;    
idata1 <= 16'b0101_0101_0101_0101;                                              
// --> end                                             
$display("Running testbench");                       
end        

always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
#20
clock <= ~clock;                                         
//@eachvec;                                              
// --> end                                             
end                
                                            
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
#100
exec <= 1'b1;
#100
idata1 <= 16'b00001111_00001111;
#100
exec <= 1'b0;
#100
idata1 <= 16'b11111111_00000000;                                                        
//@eachvec;                                              
// --> end                                             
end             
                                       
endmodule

